{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","keyCodes","keys","handleKeyStroke","bind","assertThisInitialized","document","addEventListener","removeEventListener","e","keyIndex","indexOf","keyCode","drumPad","getElementById","parentElement","makeABeat","colors","Math","floor","random","length","style","cssText","concat","getRandomColor","beat","querySelector","innerText","id","replace","classList","add","setTimeout","remove","currentTime","play","_this2","react_default","a","createElement","Fragment","className","--color-primary","onClick","target","src","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6889d765.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.handleKeyStroke = this.handleKeyStroke.bind(this)\n  }\n\n  keyCodes = [81, 87, 69, 65, 83, 68, 90, 88, 67]\n  keys = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C']\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyStroke)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyStroke)\n  }\n\n  handleKeyStroke(e) {\n    let keyIndex = this.keyCodes.indexOf(e.keyCode)\n    if (keyIndex !== -1) {\n      let drumPad = document.getElementById(this.keys[keyIndex]).parentElement\n      this.makeABeat(drumPad)\n    }\n  }\n  \n  getRandomColor() {\n    const colors = ['#F94EF3', '#814EF9', '#E12243', '#F9B64E', '#53FC2F']\n    const randomIndex = Math.floor(Math.random() * colors.length)\n    const randomColor = colors[randomIndex]\n    \n    return randomColor\n  }\n  \n  makeABeat(drumPad) {\n    drumPad.style.cssText = `--color-primary: ${this.getRandomColor()};`\n    let beat = drumPad.querySelector('.clip')\n    document.getElementById('display').innerText = drumPad.id.replace(/[-]/g, ' ') + '!!'\n    drumPad.classList.add('active')\n    setTimeout(() => {\n      drumPad.classList.remove('active')\n    }, 100)\n    beat.currentTime = 0\n    beat.play()\n  }\n\n  render() {\n    return (\n      <>\n        <header className='header'>\n          <div className='centered'>\n            <h1 className='brand'>Drum Machine</h1>\n          </div>\n        </header>\n\n        <main id='drum-machine'>\n          <div id='display'>Make Some Noise!!</div>\n          <button className='drum-pad' id='kick-big' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='Q' src='./drum-samples/kick-big.mp3' />Q\n          </button>\n          <button className='drum-pad' id='kick-classic' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='W' src='./drum-samples/kick-classic.mp3' />W\n          </button>\n          <button className='drum-pad' id='kick-cultivator' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='E' src='./drum-samples/kick-cultivator.mp3' />E\n          </button>\n          <button className='drum-pad' id='kick-heavy' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='A' src='./drum-samples/kick-heavy.mp3' />A\n          </button>\n          <button className='drum-pad' id='kick-newwave' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='S' src='./drum-samples/kick-newwave.mp3' />S\n          </button>\n          <button className='drum-pad' id='kick-oldschool' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='D' src='./drum-samples/kick-oldschool.mp3' />D\n          </button>\n          <button className='drum-pad' id='tom-808' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='Z' src='./drum-samples/tom-808.mp3' />Z\n          </button>\n          <button className='drum-pad' id='tom-acoustic-1' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='X' src='./drum-samples/tom-acoustic-1.mp3' />X\n          </button>\n          <button className='drum-pad' id='tom-acoustic-2' style={{ '--color-primary': this.getRandomColor() }} onClick={e => this.makeABeat(e.target)}>\n            <audio className='clip' id='C' src='./drum-samples/tom-acoustic-2.mp3' />C\n          </button>\n        </main>\n\n        <footer className='footer'>\n          <div className='centered'>\n            <aside className='info'>\n              <p>\n                For FreeCodeCamp |{' '}\n                <a href='https://learn.freecodecamp.org/front-end-libraries/front-end-libraries-projects/build-a-drum-machine/' target='_blank' rel='noopener noreferrer'>\n                  Drum Machine Challenge\n                </a>\n              </p>\n              <p>\n                By{' '}\n                <a href='https://github.com/amr-adel' target='_blank' rel='noopener noreferrer'>\n                  Fullstack Amr\n                </a>\n              </p>\n            </aside>\n            <aside className='credit'>\n              <p>\n                Background from{' '}\n                <a href='https://www.toptal.com/designers/subtlepatterns/random-grey-variations/' target='_blank' rel='noopener noreferrer'>\n                  Subtle Patterns\n                </a>\n              </p>\n              <p>\n                Drum Samples from{' '}\n                <a href='ttp://99sounds.org/drum-samples/' target='_blank' rel='noopener noreferrer'>\n                  99Sounds\n                </a>\n              </p>\n            </aside>\n          </div>\n        </footer>\n      </>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}